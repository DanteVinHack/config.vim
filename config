" Basic configs
set number
set relativenumber
set tabstop=2
set shiftwidth=2
syntax enable
set updatetime=250
set mouse=a
let mapleader = " "
set nowrap
set scrolloff=10
set hidden
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
nmap <leader>w :w!<cr>
nmap <leader>qq :q<cr>
nmap <leader>qa :bufdo bd<cr>
nmap <leader>l :bnext<cr>
nmap <leader>h :bprevious<cr>
set incsearch
set nobackup
set nowb
set noswapfile

" Restore last position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Remove sounds
set noerrorbells
set novisualbell 
set t_vb=
set tm=500

" Plugins
call plug#begin('~/.vim/plugged')

Plug 'HerringtonDarkholme/yats.vim'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'mattn/emmet-vim'
Plug 'preservim/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'joshdick/onedark.vim'
Plug 'mihaifm/bufstop'
Plug 'jesseduffield/lazygit'
Plug 'neoclide/coc-eslint'
Plug 'jiangmiao/auto-pairs'
Plug 'voldikss/vim-floaterm'
Plug 'puremourning/vimspector'
Plug 'tpope/vim-commentary'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'branch': 'release/0.x'
  \ }

call plug#end()

" Prettier configs
let g:prettier#quickfix_enabled = 0
autocmd BufWritePre *.ts,*.tsx,*.js,*.jsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.cpp,*.vue,*.yaml,*.html PrettierAsync

" Coc configs
let g:coc_global_extensions = ['coc-tsserver', 'coc-vetur', 'coc-clangd']

" Airline
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'onedark'
let g:airline_section_z = airline#section#create('%3p%% %#__accent_bold#%4l%#__restore__#%#__accent_bold#/%L%#__restore__# %3v')

" Theme
if (has("termguicolors"))
  set termguicolors
endif
colorscheme onedark
set background=dark
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE
autocmd vimenter * hi EndOfBuffer guibg=NONE ctermbg=NONE
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set fillchars+=vert:â”‚
hi VertSplit ctermbg=NONE guibg=NONE
set encoding=UTF-8

" Vimspecter Config
let g:vimspector_enable_mappings = 'HUMAN'

" GitGutter
let g:gitgutter_override_sign_column_highlight = 1

" Floaterm
let g:floaterm_keymap_toggle = '<leader>t'
let g:floaterm_height = 0.8

" REMAPS ------------------------------------------

" Autocomplete
inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<TAB>"
inoremap <silent><expr> <cr> "\<c-g>u\<CR>"

" Window navigation
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Moving lines
nnoremap <S-j> :m .+1<CR>==
nnoremap <S-k> :m .-2<CR>==
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv
map <Enter> o<ESC>
map <S-Enter> O<ESC>

" Keymap Coc
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Nerdtree navigation
nnoremap <leader>nn :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" Floaterm
nnoremap <silent> <leader>t :FloatermToggle<CR>
let g:floaterm_height=0.9

" Buffers navigation
map <leader>b :Bufstop<CR>
let g:BufstopAutoSpeedToggle = 1

" HTML maps
let g:user_emmet_leader_key='<tab>'
let g:user_emmet_settings = {
\  'variables': {'lang': 'ja'},
\  'html': {
\    'default_attributes': {
\      'option': {'value': v:null},
\      'textarea': {'id': v:null, 'name': v:null, 'cols': 10, 'rows': 10},
\    },
\    'snippets': {
\      'html:5': "<!DOCTYPE html>\n"
\              ."<html lang=\"${lang}\">\n"
\              ."<head>\n"
\              ."\t<meta charset=\"${charset}\"/>\n"
\              ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n"
\              ."\t<link rel=\"stylesheet\" href=\"style.css\">\n"
\              ."\t<title>Page</title>\n"
\              ."</head>\n"
\              ."<body>\n"
\              ."\n\n"
\              ."\t<script src=\"app.js\"></script>\n"
\              ."</body>\n"
\              ."</html>",
\    },
\  },
\}

" Show docs keys
map <Leader>k :call <SID>show_documentation()<CR>
function! s:show_documentation()
if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif

endfunction
